

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Sep 23 15:18:41 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	dabs	1,0x7E,2
    14  0000                     	;# 
    15  0001                     	;# 
    16  0002                     	;# 
    17  0003                     	;# 
    18  0004                     	;# 
    19  0005                     	;# 
    20  0006                     	;# 
    21  0007                     	;# 
    22  0008                     	;# 
    23  0009                     	;# 
    24  000A                     	;# 
    25  000B                     	;# 
    26  000C                     	;# 
    27  000D                     	;# 
    28  000E                     	;# 
    29  000E                     	;# 
    30  000F                     	;# 
    31  0010                     	;# 
    32  0011                     	;# 
    33  0012                     	;# 
    34  0013                     	;# 
    35  0014                     	;# 
    36  0015                     	;# 
    37  0015                     	;# 
    38  0016                     	;# 
    39  0017                     	;# 
    40  0018                     	;# 
    41  0019                     	;# 
    42  001A                     	;# 
    43  001B                     	;# 
    44  001B                     	;# 
    45  001C                     	;# 
    46  001D                     	;# 
    47  001E                     	;# 
    48  001F                     	;# 
    49  0081                     	;# 
    50  0085                     	;# 
    51  0086                     	;# 
    52  0087                     	;# 
    53  0088                     	;# 
    54  0089                     	;# 
    55  008C                     	;# 
    56  008D                     	;# 
    57  008E                     	;# 
    58  0091                     	;# 
    59  0092                     	;# 
    60  0093                     	;# 
    61  0094                     	;# 
    62  0098                     	;# 
    63  0099                     	;# 
    64  009C                     	;# 
    65  009D                     	;# 
    66  009E                     	;# 
    67  009F                     	;# 
    68  010C                     	;# 
    69  010D                     	;# 
    70  010E                     	;# 
    71  010F                     	;# 
    72  018C                     	;# 
    73  018D                     	;# 
    74  0006                     _PORTB	set	6
    75  001A                     _RCREG	set	26
    76  0019                     _TXREG	set	25
    77  00C4                     _CREN	set	196
    78  0065                     _RCIF	set	101
    79  00C7                     _SPEN	set	199
    80  0099                     _SPBRG	set	153
    81  0086                     _TRISB	set	134
    82  04C2                     _BRGH	set	1218
    83  04C4                     _SYNC	set	1220
    84  043E                     _TRISC6	set	1086
    85  043F                     _TRISC7	set	1087
    86  04C1                     _TRMT	set	1217
    87  04C5                     _TXEN	set	1221
    88                           
    89                           	psect	text0
    90  0000                     __ptext0:	
    91                           ; #config settings
    92                           
    93                           
    94                           ;psect for function _UART_Data_Ready
    95  0000                     
    96                           	psect	cinit
    97  07FC                     start_initialization:	
    98  07FC                     __initialization:	
    99  07FC                     end_of_initialization:	
   100                           ;End of C runtime variable initialization code
   101                           
   102  07FC                     __end_of__initialization:	
   103  07FC  0183               	clrf	3
   104  07FD  120A  118A  2E51   	ljmp	_main	;jump to C main() function
   105                           
   106                           	psect	cstackCOMMON
   107  0070                     __pcstackCOMMON:	
   108  0070                     ??_UART_Data_Ready:	
   109  0070                     ??_UART_Read:	
   110                           ; 0 bytes @ 0x0
   111                           
   112  0070                     ?_main:	
   113                           ; 0 bytes @ 0x0
   114                           
   115  0070                     ?_UART_Data_Ready:	
   116                           ; 0 bytes @ 0x0
   117                           
   118  0070                     ?_UART_Read:	
   119                           ; 1 bytes @ 0x0
   120                           
   121  0070                     ?___aldiv:	
   122                           ; 1 bytes @ 0x0
   123                           
   124  0070                     ___aldiv@divisor:	
   125                           ; 4 bytes @ 0x0
   126                           
   127                           
   128                           ; 4 bytes @ 0x0
   129  0070                     	ds	4
   130  0074                     ___aldiv@dividend:	
   131                           
   132                           ; 4 bytes @ 0x4
   133  0074                     	ds	4
   134  0078                     ??___aldiv:	
   135                           
   136                           ; 0 bytes @ 0x8
   137  0078                     	ds	1
   138  0079                     UART_Init@x:	
   139                           
   140                           ; 2 bytes @ 0x9
   141  0079                     	ds	2
   142  007B                     ??_main:	
   143                           
   144                           ; 0 bytes @ 0xB
   145  007B                     	ds	3
   146                           
   147                           	psect	cstackBANK0
   148  0020                     __pcstackBANK0:	
   149  0020                     ___aldiv@counter:	
   150                           
   151                           ; 1 bytes @ 0x0
   152  0020                     	ds	1
   153  0021                     ___aldiv@sign:	
   154                           
   155                           ; 1 bytes @ 0x1
   156  0021                     	ds	1
   157  0022                     ___aldiv@quotient:	
   158                           
   159                           ; 4 bytes @ 0x2
   160  0022                     	ds	4
   161  0026                     ?_UART_Init:	
   162  0026                     UART_Init@baudrate:	
   163                           ; 1 bytes @ 0x6
   164                           
   165                           
   166                           ; 4 bytes @ 0x6
   167  0026                     	ds	4
   168  002A                     ??_UART_Init:	
   169                           
   170                           ; 0 bytes @ 0xA
   171  002A                     	ds	12
   172                           
   173                           	psect	maintext
   174  0651                     __pmaintext:	
   175 ;;
   176 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   177 ;;
   178 ;; *************** function _main *****************
   179 ;; Defined at:
   180 ;;		line 20 in file "slave.c"
   181 ;; Parameters:    Size  Location     Type
   182 ;;		None
   183 ;; Auto vars:     Size  Location     Type
   184 ;;		None
   185 ;; Return value:  Size  Location     Type
   186 ;;		None               void
   187 ;; Registers used:
   188 ;;		wreg, status,2, status,0, pclath, cstack
   189 ;; Tracked objects:
   190 ;;		On entry : 17F/0
   191 ;;		On exit  : 0/0
   192 ;;		Unchanged: 0/0
   193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   194 ;;      Params:         0       0       0       0       0
   195 ;;      Locals:         0       0       0       0       0
   196 ;;      Temps:          3       0       0       0       0
   197 ;;      Totals:         3       0       0       0       0
   198 ;;Total ram usage:        3 bytes
   199 ;; Hardware stack levels required when called:    2
   200 ;; This function calls:
   201 ;;		_UART_Data_Ready
   202 ;;		_UART_Init
   203 ;;		_UART_Read
   204 ;; This function is called by:
   205 ;;		Startup code after reset
   206 ;; This function uses a non-reentrant model
   207 ;;
   208                           
   209                           
   210                           ;psect for function _main
   211  0651                     _main:	
   212                           
   213                           ;slave.c: 22: TRISB = 0x00;
   214                           
   215                           ;incstack = 0
   216                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   217  0651  1683               	bsf	3,5	;RP0=1, select bank1
   218  0652  1303               	bcf	3,6	;RP1=0, select bank1
   219  0653  0186               	clrf	6	;volatile
   220                           
   221                           ;slave.c: 23: UART_Init(9600);
   222  0654  3000               	movlw	0
   223  0655  1283               	bcf	3,5	;RP0=0, select bank0
   224  0656  1303               	bcf	3,6	;RP1=0, select bank0
   225  0657  00A9               	movwf	UART_Init@baudrate+3
   226  0658  3000               	movlw	0
   227  0659  00A8               	movwf	UART_Init@baudrate+2
   228  065A  3025               	movlw	37
   229  065B  00A7               	movwf	UART_Init@baudrate+1
   230  065C  3080               	movlw	128
   231  065D  00A6               	movwf	UART_Init@baudrate
   232  065E  120A  118A  2710  120A  118A  	fcall	_UART_Init
   233  0663                     l706:	
   234                           ;slave.c: 25: do
   235                           
   236                           
   237                           ;slave.c: 26: {
   238                           ;slave.c: 27: if(UART_Data_Ready())
   239  0663  120A  118A  2645  120A  118A  	fcall	_UART_Data_Ready
   240  0668  3A00               	xorlw	0
   241  0669  1903               	skipnz
   242  066A  2E73               	goto	l710
   243                           
   244                           ;slave.c: 28: PORTB = UART_Read();
   245  066B  120A  118A  264B  120A  118A  	fcall	_UART_Read
   246  0670  1283               	bcf	3,5	;RP0=0, select bank0
   247  0671  1303               	bcf	3,6	;RP1=0, select bank0
   248  0672  0086               	movwf	6	;volatile
   249  0673                     l710:	
   250                           
   251                           ;slave.c: 30: _delay((unsigned long)((100)*(8000000/4000.0)));
   252  0673  3002               	movlw	2
   253  0674  00FD               	movwf	??_main+2
   254  0675  3004               	movlw	4
   255  0676  00FC               	movwf	??_main+1
   256  0677  30BA               	movlw	186
   257  0678  00FB               	movwf	??_main
   258  0679                     u437:	
   259  0679  0BFB               	decfsz	??_main,f
   260  067A  2E79               	goto	u437
   261  067B  0BFC               	decfsz	??_main+1,f
   262  067C  2E79               	goto	u437
   263  067D  0BFD               	decfsz	??_main+2,f
   264  067E  2E79               	goto	u437
   265  067F  0000               	nop
   266                           
   267                           ;slave.c: 32: }while(1);
   268  0680  2E63               	goto	l706
   269  0681                     __end_of_main:	
   270                           
   271                           	psect	text1
   272  064B                     __ptext1:	
   273 ;; *************** function _UART_Read *****************
   274 ;; Defined at:
   275 ;;		line 33 in file "uart.h"
   276 ;; Parameters:    Size  Location     Type
   277 ;;		None
   278 ;; Auto vars:     Size  Location     Type
   279 ;;		None
   280 ;; Return value:  Size  Location     Type
   281 ;;                  1    wreg      unsigned char 
   282 ;; Registers used:
   283 ;;		wreg
   284 ;; Tracked objects:
   285 ;;		On entry : 0/0
   286 ;;		On exit  : 0/0
   287 ;;		Unchanged: 0/0
   288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   289 ;;      Params:         0       0       0       0       0
   290 ;;      Locals:         0       0       0       0       0
   291 ;;      Temps:          0       0       0       0       0
   292 ;;      Totals:         0       0       0       0       0
   293 ;;Total ram usage:        0 bytes
   294 ;; Hardware stack levels used:    1
   295 ;; This function calls:
   296 ;;		Nothing
   297 ;; This function is called by:
   298 ;;		_main
   299 ;;		_UART_Read_Text
   300 ;; This function uses a non-reentrant model
   301 ;;
   302                           
   303                           
   304                           ;psect for function _UART_Read
   305  064B                     _UART_Read:	
   306  064B                     l44:	
   307                           ;uart.h: 36: while(!RCIF);
   308                           
   309                           ;incstack = 0
   310                           ; Regs used in _UART_Read: [wreg]
   311                           
   312  064B  1283               	bcf	3,5	;RP0=0, select bank0
   313  064C  1303               	bcf	3,6	;RP1=0, select bank0
   314  064D  1E8C               	btfss	12,5	;volatile
   315  064E  2E4B               	goto	l44
   316                           
   317                           ;uart.h: 37: return RCREG;
   318  064F  081A               	movf	26,w	;volatile
   319  0650  0008               	return
   320  0651                     __end_of_UART_Read:	
   321                           
   322                           	psect	text2
   323  0710                     __ptext2:	
   324 ;; *************** function _UART_Init *****************
   325 ;; Defined at:
   326 ;;		line 1 in file "uart.h"
   327 ;; Parameters:    Size  Location     Type
   328 ;;  baudrate        4    6[BANK0 ] const long 
   329 ;; Auto vars:     Size  Location     Type
   330 ;;  x               2    9[COMMON] unsigned int 
   331 ;; Return value:  Size  Location     Type
   332 ;;                  1    wreg      unsigned char 
   333 ;; Registers used:
   334 ;;		wreg, status,2, status,0, pclath, cstack
   335 ;; Tracked objects:
   336 ;;		On entry : 0/0
   337 ;;		On exit  : 0/0
   338 ;;		Unchanged: 0/0
   339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   340 ;;      Params:         0       4       0       0       0
   341 ;;      Locals:         2       0       0       0       0
   342 ;;      Temps:          0      12       0       0       0
   343 ;;      Totals:         2      16       0       0       0
   344 ;;Total ram usage:       18 bytes
   345 ;; Hardware stack levels used:    1
   346 ;; Hardware stack levels required when called:    1
   347 ;; This function calls:
   348 ;;		___aldiv
   349 ;; This function is called by:
   350 ;;		_main
   351 ;; This function uses a non-reentrant model
   352 ;;
   353                           
   354                           
   355                           ;psect for function _UART_Init
   356  0710                     _UART_Init:	
   357                           
   358                           ;uart.h: 3: unsigned int x;
   359                           ;uart.h: 4: x = (8000000 - baudrate*64)/(baudrate*64);
   360                           
   361                           ;incstack = 0
   362                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
   363  0710  1283               	bcf	3,5	;RP0=0, select bank0
   364  0711  1303               	bcf	3,6	;RP1=0, select bank0
   365  0712  0826               	movf	UART_Init@baudrate,w
   366  0713  00AA               	movwf	??_UART_Init
   367  0714  0827               	movf	UART_Init@baudrate+1,w
   368  0715  00AB               	movwf	??_UART_Init+1
   369  0716  0828               	movf	UART_Init@baudrate+2,w
   370  0717  00AC               	movwf	??_UART_Init+2
   371  0718  0829               	movf	UART_Init@baudrate+3,w
   372  0719  00AD               	movwf	??_UART_Init+3
   373  071A  3006               	movlw	6
   374  071B                     u345:	
   375  071B  1003               	clrc
   376  071C  0DAA               	rlf	??_UART_Init,f
   377  071D  0DAB               	rlf	??_UART_Init+1,f
   378  071E  0DAC               	rlf	??_UART_Init+2,f
   379  071F  0DAD               	rlf	??_UART_Init+3,f
   380  0720  3EFF               	addlw	-1
   381  0721  1D03               	skipz
   382  0722  2F1B               	goto	u345
   383  0723  082D               	movf	??_UART_Init+3,w
   384  0724  00F3               	movwf	___aldiv@divisor+3
   385  0725  082C               	movf	??_UART_Init+2,w
   386  0726  00F2               	movwf	___aldiv@divisor+2
   387  0727  082B               	movf	??_UART_Init+1,w
   388  0728  00F1               	movwf	___aldiv@divisor+1
   389  0729  082A               	movf	??_UART_Init,w
   390  072A  00F0               	movwf	___aldiv@divisor
   391  072B  3000               	movlw	0
   392  072C  00AE               	movwf	??_UART_Init+4
   393  072D  3012               	movlw	18
   394  072E  00AF               	movwf	??_UART_Init+5
   395  072F  307A               	movlw	122
   396  0730  00B0               	movwf	??_UART_Init+6
   397  0731  3000               	movlw	0
   398  0732  00B1               	movwf	??_UART_Init+7
   399  0733  0826               	movf	UART_Init@baudrate,w
   400  0734  00B2               	movwf	??_UART_Init+8
   401  0735  0827               	movf	UART_Init@baudrate+1,w
   402  0736  00B3               	movwf	??_UART_Init+9
   403  0737  0828               	movf	UART_Init@baudrate+2,w
   404  0738  00B4               	movwf	??_UART_Init+10
   405  0739  0829               	movf	UART_Init@baudrate+3,w
   406  073A  00B5               	movwf	??_UART_Init+11
   407  073B  3006               	movlw	6
   408  073C                     u355:	
   409  073C  1003               	clrc
   410  073D  0DB2               	rlf	??_UART_Init+8,f
   411  073E  0DB3               	rlf	??_UART_Init+9,f
   412  073F  0DB4               	rlf	??_UART_Init+10,f
   413  0740  0DB5               	rlf	??_UART_Init+11,f
   414  0741  3EFF               	addlw	-1
   415  0742  1D03               	skipz
   416  0743  2F3C               	goto	u355
   417  0744  09B2               	comf	??_UART_Init+8,f
   418  0745  09B3               	comf	??_UART_Init+9,f
   419  0746  09B4               	comf	??_UART_Init+10,f
   420  0747  09B5               	comf	??_UART_Init+11,f
   421  0748  0AB2               	incf	??_UART_Init+8,f
   422  0749  1903               	skipnz
   423  074A  0AB3               	incf	??_UART_Init+9,f
   424  074B  1903               	skipnz
   425  074C  0AB4               	incf	??_UART_Init+10,f
   426  074D  1903               	skipnz
   427  074E  0AB5               	incf	??_UART_Init+11,f
   428  074F  0832               	movf	??_UART_Init+8,w
   429  0750  07AE               	addwf	??_UART_Init+4,f
   430  0751  0833               	movf	??_UART_Init+9,w
   431  0752  1803               	skipnc
   432  0753  0F33               	incfsz	??_UART_Init+9,w
   433  0754  2F56               	goto	u360
   434  0755  2F57               	goto	u361
   435  0756                     u360:	
   436  0756  07AF               	addwf	??_UART_Init+5,f
   437  0757                     u361:	
   438  0757  0834               	movf	??_UART_Init+10,w
   439  0758  1803               	skipnc
   440  0759  0F34               	incfsz	??_UART_Init+10,w
   441  075A  2F5C               	goto	u362
   442  075B  2F5D               	goto	u363
   443  075C                     u362:	
   444  075C  07B0               	addwf	??_UART_Init+6,f
   445  075D                     u363:	
   446  075D  0835               	movf	??_UART_Init+11,w
   447  075E  1803               	skipnc
   448  075F  0A35               	incf	??_UART_Init+11,w
   449  0760  07B1               	addwf	??_UART_Init+7,f
   450  0761  0831               	movf	??_UART_Init+7,w
   451  0762  00F7               	movwf	___aldiv@dividend+3
   452  0763  0830               	movf	??_UART_Init+6,w
   453  0764  00F6               	movwf	___aldiv@dividend+2
   454  0765  082F               	movf	??_UART_Init+5,w
   455  0766  00F5               	movwf	___aldiv@dividend+1
   456  0767  082E               	movf	??_UART_Init+4,w
   457  0768  00F4               	movwf	___aldiv@dividend
   458  0769  120A  118A  2681  120A  118A  	fcall	___aldiv
   459  076E  0871               	movf	?___aldiv+1,w
   460  076F  01FA               	clrf	UART_Init@x+1
   461  0770  07FA               	addwf	UART_Init@x+1,f
   462  0771  0870               	movf	?___aldiv,w
   463  0772  01F9               	clrf	UART_Init@x
   464  0773  07F9               	addwf	UART_Init@x,f
   465                           
   466                           ;uart.h: 5: if(x>255)
   467  0774  3001               	movlw	1
   468  0775  027A               	subwf	UART_Init@x+1,w
   469  0776  3000               	movlw	0
   470  0777  1903               	skipnz
   471  0778  0279               	subwf	UART_Init@x,w
   472  0779  1C03               	skipc
   473  077A  2FE2               	goto	l684
   474                           
   475                           ;uart.h: 6: {
   476                           ;uart.h: 7: x = (8000000 - baudrate*16)/(baudrate*16);
   477  077B  1283               	bcf	3,5	;RP0=0, select bank0
   478  077C  1303               	bcf	3,6	;RP1=0, select bank0
   479  077D  0826               	movf	UART_Init@baudrate,w
   480  077E  00AA               	movwf	??_UART_Init
   481  077F  0827               	movf	UART_Init@baudrate+1,w
   482  0780  00AB               	movwf	??_UART_Init+1
   483  0781  0828               	movf	UART_Init@baudrate+2,w
   484  0782  00AC               	movwf	??_UART_Init+2
   485  0783  0829               	movf	UART_Init@baudrate+3,w
   486  0784  00AD               	movwf	??_UART_Init+3
   487  0785  3004               	movlw	4
   488  0786                     u385:	
   489  0786  1003               	clrc
   490  0787  0DAA               	rlf	??_UART_Init,f
   491  0788  0DAB               	rlf	??_UART_Init+1,f
   492  0789  0DAC               	rlf	??_UART_Init+2,f
   493  078A  0DAD               	rlf	??_UART_Init+3,f
   494  078B  3EFF               	addlw	-1
   495  078C  1D03               	skipz
   496  078D  2F86               	goto	u385
   497  078E  082D               	movf	??_UART_Init+3,w
   498  078F  00F3               	movwf	___aldiv@divisor+3
   499  0790  082C               	movf	??_UART_Init+2,w
   500  0791  00F2               	movwf	___aldiv@divisor+2
   501  0792  082B               	movf	??_UART_Init+1,w
   502  0793  00F1               	movwf	___aldiv@divisor+1
   503  0794  082A               	movf	??_UART_Init,w
   504  0795  00F0               	movwf	___aldiv@divisor
   505  0796  3000               	movlw	0
   506  0797  00AE               	movwf	??_UART_Init+4
   507  0798  3012               	movlw	18
   508  0799  00AF               	movwf	??_UART_Init+5
   509  079A  307A               	movlw	122
   510  079B  00B0               	movwf	??_UART_Init+6
   511  079C  3000               	movlw	0
   512  079D  00B1               	movwf	??_UART_Init+7
   513  079E  0826               	movf	UART_Init@baudrate,w
   514  079F  00B2               	movwf	??_UART_Init+8
   515  07A0  0827               	movf	UART_Init@baudrate+1,w
   516  07A1  00B3               	movwf	??_UART_Init+9
   517  07A2  0828               	movf	UART_Init@baudrate+2,w
   518  07A3  00B4               	movwf	??_UART_Init+10
   519  07A4  0829               	movf	UART_Init@baudrate+3,w
   520  07A5  00B5               	movwf	??_UART_Init+11
   521  07A6  3004               	movlw	4
   522  07A7                     u395:	
   523  07A7  1003               	clrc
   524  07A8  0DB2               	rlf	??_UART_Init+8,f
   525  07A9  0DB3               	rlf	??_UART_Init+9,f
   526  07AA  0DB4               	rlf	??_UART_Init+10,f
   527  07AB  0DB5               	rlf	??_UART_Init+11,f
   528  07AC  3EFF               	addlw	-1
   529  07AD  1D03               	skipz
   530  07AE  2FA7               	goto	u395
   531  07AF  09B2               	comf	??_UART_Init+8,f
   532  07B0  09B3               	comf	??_UART_Init+9,f
   533  07B1  09B4               	comf	??_UART_Init+10,f
   534  07B2  09B5               	comf	??_UART_Init+11,f
   535  07B3  0AB2               	incf	??_UART_Init+8,f
   536  07B4  1903               	skipnz
   537  07B5  0AB3               	incf	??_UART_Init+9,f
   538  07B6  1903               	skipnz
   539  07B7  0AB4               	incf	??_UART_Init+10,f
   540  07B8  1903               	skipnz
   541  07B9  0AB5               	incf	??_UART_Init+11,f
   542  07BA  0832               	movf	??_UART_Init+8,w
   543  07BB  07AE               	addwf	??_UART_Init+4,f
   544  07BC  0833               	movf	??_UART_Init+9,w
   545  07BD  1803               	skipnc
   546  07BE  0F33               	incfsz	??_UART_Init+9,w
   547  07BF  2FC1               	goto	u400
   548  07C0  2FC2               	goto	u401
   549  07C1                     u400:	
   550  07C1  07AF               	addwf	??_UART_Init+5,f
   551  07C2                     u401:	
   552  07C2  0834               	movf	??_UART_Init+10,w
   553  07C3  1803               	skipnc
   554  07C4  0F34               	incfsz	??_UART_Init+10,w
   555  07C5  2FC7               	goto	u402
   556  07C6  2FC8               	goto	u403
   557  07C7                     u402:	
   558  07C7  07B0               	addwf	??_UART_Init+6,f
   559  07C8                     u403:	
   560  07C8  0835               	movf	??_UART_Init+11,w
   561  07C9  1803               	skipnc
   562  07CA  0A35               	incf	??_UART_Init+11,w
   563  07CB  07B1               	addwf	??_UART_Init+7,f
   564  07CC  0831               	movf	??_UART_Init+7,w
   565  07CD  00F7               	movwf	___aldiv@dividend+3
   566  07CE  0830               	movf	??_UART_Init+6,w
   567  07CF  00F6               	movwf	___aldiv@dividend+2
   568  07D0  082F               	movf	??_UART_Init+5,w
   569  07D1  00F5               	movwf	___aldiv@dividend+1
   570  07D2  082E               	movf	??_UART_Init+4,w
   571  07D3  00F4               	movwf	___aldiv@dividend
   572  07D4  120A  118A  2681  120A  118A  	fcall	___aldiv
   573  07D9  0871               	movf	?___aldiv+1,w
   574  07DA  01FA               	clrf	UART_Init@x+1
   575  07DB  07FA               	addwf	UART_Init@x+1,f
   576  07DC  0870               	movf	?___aldiv,w
   577  07DD  01F9               	clrf	UART_Init@x
   578  07DE  07F9               	addwf	UART_Init@x,f
   579                           
   580                           ;uart.h: 8: BRGH = 1;
   581  07DF  1683               	bsf	3,5	;RP0=1, select bank1
   582  07E0  1303               	bcf	3,6	;RP1=0, select bank1
   583  07E1  1518               	bsf	24,2	;volatile
   584  07E2                     l684:	
   585                           
   586                           ;uart.h: 9: }
   587                           ;uart.h: 10: if(x<256)
   588  07E2  3001               	movlw	1
   589  07E3  027A               	subwf	UART_Init@x+1,w
   590  07E4  3000               	movlw	0
   591  07E5  1903               	skipnz
   592  07E6  0279               	subwf	UART_Init@x,w
   593  07E7  1803               	skipnc
   594  07E8  0008               	return
   595                           
   596                           ;uart.h: 11: {
   597                           ;uart.h: 12: SPBRG = x;
   598  07E9  0879               	movf	UART_Init@x,w
   599  07EA  1683               	bsf	3,5	;RP0=1, select bank1
   600  07EB  1303               	bcf	3,6	;RP1=0, select bank1
   601  07EC  0099               	movwf	25	;volatile
   602                           
   603                           ;uart.h: 13: SYNC = 0;
   604  07ED  1218               	bcf	24,4	;volatile
   605                           
   606                           ;uart.h: 14: SPEN = 1;
   607  07EE  1283               	bcf	3,5	;RP0=0, select bank0
   608  07EF  1303               	bcf	3,6	;RP1=0, select bank0
   609  07F0  1798               	bsf	24,7	;volatile
   610                           
   611                           ;uart.h: 15: TRISC7 = 1;
   612  07F1  1683               	bsf	3,5	;RP0=1, select bank1
   613  07F2  1303               	bcf	3,6	;RP1=0, select bank1
   614  07F3  1787               	bsf	7,7	;volatile
   615                           
   616                           ;uart.h: 16: TRISC6 = 1;
   617  07F4  1707               	bsf	7,6	;volatile
   618                           
   619                           ;uart.h: 17: CREN = 1;
   620  07F5  1283               	bcf	3,5	;RP0=0, select bank0
   621  07F6  1303               	bcf	3,6	;RP1=0, select bank0
   622  07F7  1618               	bsf	24,4	;volatile
   623                           
   624                           ;uart.h: 18: TXEN = 1;
   625  07F8  1683               	bsf	3,5	;RP0=1, select bank1
   626  07F9  1303               	bcf	3,6	;RP1=0, select bank1
   627  07FA  1698               	bsf	24,5	;volatile
   628                           
   629                           ;uart.h: 19: return 1;
   630                           ;	Return value of _UART_Init is never used
   631  07FB  0008               	return
   632  07FC                     __end_of_UART_Init:	
   633                           ;uart.h: 20: }
   634                           ;uart.h: 21: return 0;
   635                           ;	Return value of _UART_Init is never used
   636                           
   637                           
   638                           	psect	text3
   639  0681                     __ptext3:	
   640 ;; *************** function ___aldiv *****************
   641 ;; Defined at:
   642 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\aldiv.c"
   643 ;; Parameters:    Size  Location     Type
   644 ;;  divisor         4    0[COMMON] long 
   645 ;;  dividend        4    4[COMMON] long 
   646 ;; Auto vars:     Size  Location     Type
   647 ;;  quotient        4    2[BANK0 ] long 
   648 ;;  sign            1    1[BANK0 ] unsigned char 
   649 ;;  counter         1    0[BANK0 ] unsigned char 
   650 ;; Return value:  Size  Location     Type
   651 ;;                  4    0[COMMON] long 
   652 ;; Registers used:
   653 ;;		wreg, status,2, status,0
   654 ;; Tracked objects:
   655 ;;		On entry : 0/0
   656 ;;		On exit  : 0/0
   657 ;;		Unchanged: 0/0
   658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   659 ;;      Params:         8       0       0       0       0
   660 ;;      Locals:         0       6       0       0       0
   661 ;;      Temps:          1       0       0       0       0
   662 ;;      Totals:         9       6       0       0       0
   663 ;;Total ram usage:       15 bytes
   664 ;; Hardware stack levels used:    1
   665 ;; This function calls:
   666 ;;		Nothing
   667 ;; This function is called by:
   668 ;;		_UART_Init
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           
   673                           ;psect for function ___aldiv
   674  0681                     ___aldiv:	
   675                           
   676                           ;incstack = 0
   677                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
   678  0681  1283               	bcf	3,5	;RP0=0, select bank0
   679  0682  1303               	bcf	3,6	;RP1=0, select bank0
   680  0683  01A1               	clrf	___aldiv@sign
   681  0684  1FF3               	btfss	___aldiv@divisor+3,7
   682  0685  2E93               	goto	l210
   683  0686  09F0               	comf	___aldiv@divisor,f
   684  0687  09F1               	comf	___aldiv@divisor+1,f
   685  0688  09F2               	comf	___aldiv@divisor+2,f
   686  0689  09F3               	comf	___aldiv@divisor+3,f
   687  068A  0AF0               	incf	___aldiv@divisor,f
   688  068B  1903               	skipnz
   689  068C  0AF1               	incf	___aldiv@divisor+1,f
   690  068D  1903               	skipnz
   691  068E  0AF2               	incf	___aldiv@divisor+2,f
   692  068F  1903               	skipnz
   693  0690  0AF3               	incf	___aldiv@divisor+3,f
   694  0691  01A1               	clrf	___aldiv@sign
   695  0692  0AA1               	incf	___aldiv@sign,f
   696  0693                     l210:	
   697  0693  1FF7               	btfss	___aldiv@dividend+3,7
   698  0694  2EA4               	goto	l646
   699  0695  09F4               	comf	___aldiv@dividend,f
   700  0696  09F5               	comf	___aldiv@dividend+1,f
   701  0697  09F6               	comf	___aldiv@dividend+2,f
   702  0698  09F7               	comf	___aldiv@dividend+3,f
   703  0699  0AF4               	incf	___aldiv@dividend,f
   704  069A  1903               	skipnz
   705  069B  0AF5               	incf	___aldiv@dividend+1,f
   706  069C  1903               	skipnz
   707  069D  0AF6               	incf	___aldiv@dividend+2,f
   708  069E  1903               	skipnz
   709  069F  0AF7               	incf	___aldiv@dividend+3,f
   710  06A0  3001               	movlw	1
   711  06A1  00F8               	movwf	??___aldiv
   712  06A2  0878               	movf	??___aldiv,w
   713  06A3  06A1               	xorwf	___aldiv@sign,f
   714  06A4                     l646:	
   715  06A4  3000               	movlw	0
   716  06A5  00A5               	movwf	___aldiv@quotient+3
   717  06A6  3000               	movlw	0
   718  06A7  00A4               	movwf	___aldiv@quotient+2
   719  06A8  3000               	movlw	0
   720  06A9  00A3               	movwf	___aldiv@quotient+1
   721  06AA  3000               	movlw	0
   722  06AB  00A2               	movwf	___aldiv@quotient
   723  06AC  0873               	movf	___aldiv@divisor+3,w
   724  06AD  0472               	iorwf	___aldiv@divisor+2,w
   725  06AE  0471               	iorwf	___aldiv@divisor+1,w
   726  06AF  0470               	iorwf	___aldiv@divisor,w
   727  06B0  1903               	skipnz
   728  06B1  2EF9               	goto	l668
   729  06B2  01A0               	clrf	___aldiv@counter
   730  06B3  0AA0               	incf	___aldiv@counter,f
   731  06B4                     l654:	
   732  06B4  1BF3               	btfsc	___aldiv@divisor+3,7
   733  06B5  2EC4               	goto	l656
   734  06B6  3001               	movlw	1
   735  06B7  00F8               	movwf	??___aldiv
   736  06B8                     u275:	
   737  06B8  1003               	clrc
   738  06B9  0DF0               	rlf	___aldiv@divisor,f
   739  06BA  0DF1               	rlf	___aldiv@divisor+1,f
   740  06BB  0DF2               	rlf	___aldiv@divisor+2,f
   741  06BC  0DF3               	rlf	___aldiv@divisor+3,f
   742  06BD  0BF8               	decfsz	??___aldiv,f
   743  06BE  2EB8               	goto	u275
   744  06BF  3001               	movlw	1
   745  06C0  00F8               	movwf	??___aldiv
   746  06C1  0878               	movf	??___aldiv,w
   747  06C2  07A0               	addwf	___aldiv@counter,f
   748  06C3  2EB4               	goto	l654
   749  06C4                     l656:	
   750  06C4  3001               	movlw	1
   751  06C5  00F8               	movwf	??___aldiv
   752  06C6                     u295:	
   753  06C6  1003               	clrc
   754  06C7  0DA2               	rlf	___aldiv@quotient,f
   755  06C8  0DA3               	rlf	___aldiv@quotient+1,f
   756  06C9  0DA4               	rlf	___aldiv@quotient+2,f
   757  06CA  0DA5               	rlf	___aldiv@quotient+3,f
   758  06CB  0BF8               	decfsz	??___aldiv,f
   759  06CC  2EC6               	goto	u295
   760  06CD  0873               	movf	___aldiv@divisor+3,w
   761  06CE  0277               	subwf	___aldiv@dividend+3,w
   762  06CF  1D03               	skipz
   763  06D0  2EDB               	goto	u305
   764  06D1  0872               	movf	___aldiv@divisor+2,w
   765  06D2  0276               	subwf	___aldiv@dividend+2,w
   766  06D3  1D03               	skipz
   767  06D4  2EDB               	goto	u305
   768  06D5  0871               	movf	___aldiv@divisor+1,w
   769  06D6  0275               	subwf	___aldiv@dividend+1,w
   770  06D7  1D03               	skipz
   771  06D8  2EDB               	goto	u305
   772  06D9  0870               	movf	___aldiv@divisor,w
   773  06DA  0274               	subwf	___aldiv@dividend,w
   774  06DB                     u305:	
   775  06DB  1C03               	skipc
   776  06DC  2EEC               	goto	l664
   777  06DD  0870               	movf	___aldiv@divisor,w
   778  06DE  02F4               	subwf	___aldiv@dividend,f
   779  06DF  0871               	movf	___aldiv@divisor+1,w
   780  06E0  1C03               	skipc
   781  06E1  0F71               	incfsz	___aldiv@divisor+1,w
   782  06E2  02F5               	subwf	___aldiv@dividend+1,f
   783  06E3  0872               	movf	___aldiv@divisor+2,w
   784  06E4  1C03               	skipc
   785  06E5  0F72               	incfsz	___aldiv@divisor+2,w
   786  06E6  02F6               	subwf	___aldiv@dividend+2,f
   787  06E7  0873               	movf	___aldiv@divisor+3,w
   788  06E8  1C03               	skipc
   789  06E9  0F73               	incfsz	___aldiv@divisor+3,w
   790  06EA  02F7               	subwf	___aldiv@dividend+3,f
   791  06EB  1422               	bsf	___aldiv@quotient,0
   792  06EC                     l664:	
   793  06EC  3001               	movlw	1
   794  06ED                     u315:	
   795  06ED  1003               	clrc
   796  06EE  0CF3               	rrf	___aldiv@divisor+3,f
   797  06EF  0CF2               	rrf	___aldiv@divisor+2,f
   798  06F0  0CF1               	rrf	___aldiv@divisor+1,f
   799  06F1  0CF0               	rrf	___aldiv@divisor,f
   800  06F2  3EFF               	addlw	-1
   801  06F3  1D03               	skipz
   802  06F4  2EED               	goto	u315
   803  06F5  3001               	movlw	1
   804  06F6  02A0               	subwf	___aldiv@counter,f
   805  06F7  1D03               	btfss	3,2
   806  06F8  2EC4               	goto	l656
   807  06F9                     l668:	
   808  06F9  0821               	movf	___aldiv@sign,w
   809  06FA  1903               	btfsc	3,2
   810  06FB  2F07               	goto	l672
   811  06FC  09A2               	comf	___aldiv@quotient,f
   812  06FD  09A3               	comf	___aldiv@quotient+1,f
   813  06FE  09A4               	comf	___aldiv@quotient+2,f
   814  06FF  09A5               	comf	___aldiv@quotient+3,f
   815  0700  0AA2               	incf	___aldiv@quotient,f
   816  0701  1903               	skipnz
   817  0702  0AA3               	incf	___aldiv@quotient+1,f
   818  0703  1903               	skipnz
   819  0704  0AA4               	incf	___aldiv@quotient+2,f
   820  0705  1903               	skipnz
   821  0706  0AA5               	incf	___aldiv@quotient+3,f
   822  0707                     l672:	
   823  0707  0825               	movf	___aldiv@quotient+3,w
   824  0708  00F3               	movwf	?___aldiv+3
   825  0709  0824               	movf	___aldiv@quotient+2,w
   826  070A  00F2               	movwf	?___aldiv+2
   827  070B  0823               	movf	___aldiv@quotient+1,w
   828  070C  00F1               	movwf	?___aldiv+1
   829  070D  0822               	movf	___aldiv@quotient,w
   830  070E  00F0               	movwf	?___aldiv
   831  070F  0008               	return
   832  0710                     __end_of___aldiv:	
   833                           
   834                           	psect	text4
   835  0645                     __ptext4:	
   836 ;; *************** function _UART_Data_Ready *****************
   837 ;; Defined at:
   838 ;;		line 29 in file "uart.h"
   839 ;; Parameters:    Size  Location     Type
   840 ;;		None
   841 ;; Auto vars:     Size  Location     Type
   842 ;;		None
   843 ;; Return value:  Size  Location     Type
   844 ;;                  1    wreg      unsigned char 
   845 ;; Registers used:
   846 ;;		wreg
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   852 ;;      Params:         0       0       0       0       0
   853 ;;      Locals:         0       0       0       0       0
   854 ;;      Temps:          0       0       0       0       0
   855 ;;      Totals:         0       0       0       0       0
   856 ;;Total ram usage:        0 bytes
   857 ;; Hardware stack levels used:    1
   858 ;; This function calls:
   859 ;;		Nothing
   860 ;; This function is called by:
   861 ;;		_main
   862 ;; This function uses a non-reentrant model
   863 ;;
   864                           
   865                           
   866                           ;psect for function _UART_Data_Ready
   867  0645                     _UART_Data_Ready:	
   868                           
   869                           ;uart.h: 31: return RCIF;
   870                           
   871                           ;incstack = 0
   872                           ; Regs used in _UART_Data_Ready: [wreg]
   873  0645  3000               	movlw	0
   874  0646  1283               	bcf	3,5	;RP0=0, select bank0
   875  0647  1303               	bcf	3,6	;RP1=0, select bank0
   876  0648  1A8C               	btfsc	12,5	;volatile
   877  0649  3001               	movlw	1
   878  064A  0008               	return
   879  064B                     __end_of_UART_Data_Ready:	
   880  007E                     btemp	set	126	;btemp
   881  007E                     wtemp	set	126
   882  007E                     wtemp0	set	126
   883  0080                     wtemp1	set	128
   884  0082                     wtemp2	set	130
   885  0084                     wtemp3	set	132
   886  0086                     wtemp4	set	134
   887  0088                     wtemp5	set	136
   888  007F                     wtemp6	set	127
   889  007E                     ttemp	set	126
   890  007E                     ttemp0	set	126
   891  0081                     ttemp1	set	129
   892  0084                     ttemp2	set	132
   893  0087                     ttemp3	set	135
   894  007F                     ttemp4	set	127
   895  007E                     ltemp	set	126
   896  007E                     ltemp0	set	126
   897  0082                     ltemp1	set	130
   898  0086                     ltemp2	set	134
   899  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     22      22
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    _main->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     721
                                             11 COMMON     3     3      0
                    _UART_Data_Ready
                          _UART_Init
                          _UART_Read
 ---------------------------------------------------------------------------------
 (1) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           18    14      4     721
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     512
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _UART_Data_Ready                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Data_Ready
   _UART_Init
     ___aldiv
   _UART_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     16      16       5       27.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Sep 23 15:18:41 2014

             __CFG_CP$OFF 0000                        l44 064B                       l210 0693  
                     l710 0673                       l706 0663                       l654 06B4  
                     l646 06A4                       l672 0707                       l664 06EC  
                     l656 06C4                       l668 06F9                       l684 07E2  
                     u400 07C1                       u305 06DB                       u401 07C2  
                     u402 07C7                       u315 06ED                       u403 07C8  
                     u360 0756                       u361 0757                       u345 071B  
                     u362 075C              __CFG_CPD$OFF 0000                       u275 06B8  
                     u363 075D                       u355 073C                       u437 0679  
                     u295 06C6                       u385 0786                       u395 07A7  
            __CFG_FOSC$HS 0000              __CFG_LVP$OFF 0000                      _BRGH 04C2  
                    _CREN 00C4                      _RCIF 0065                      _SPEN 00C7  
                    _TRMT 04C1                      _TXEN 04C5                      _SYNC 04C4  
            __CFG_WRT$OFF 0000                      _main 0651                      btemp 007E  
           __CFG_BOREN$ON 0000                      ltemp 007E                      start 0000  
                    ttemp 007E                      wtemp 007E           __end_of___aldiv 0710  
                   ?_main 0070             __CFG_WDTE$OFF 0000                     _RCREG 001A  
                   _SPBRG 0099                     _PORTB 0006                     _TRISB 0086  
                   _TXREG 0019        __size_of_UART_Init 00EC        __size_of_UART_Read 0006  
                   ltemp0 007E                     ltemp1 0082                     ltemp2 0086  
                   ltemp3 0080                     ttemp0 007E                     ttemp1 0081  
                   ttemp2 0084                     ttemp3 0087                     ttemp4 007F  
                   status 0003                     wtemp0 007E                     wtemp1 0080  
                   wtemp2 0082                     wtemp3 0084                     wtemp4 0086  
                   wtemp5 0088                     wtemp6 007F           __initialization 07FC  
            __end_of_main 0681                    ??_main 007B                    _TRISC6 043E  
                  _TRISC7 043F            __CFG_PWRTE$OFF 0000         __end_of_UART_Init 07FC  
       __end_of_UART_Read 0651                 ??___aldiv 0078   __end_of__initialization 07FC  
          __pcstackCOMMON 0070  __size_of_UART_Data_Ready 0006                __pmaintext 0651  
                 ___aldiv 0681                   __ptext0 0000                   __ptext1 064B  
                 __ptext2 0710                   __ptext3 0681                   __ptext4 0645  
        ___aldiv@dividend 0074      end_of_initialization 07FC          ___aldiv@quotient 0022  
       ??_UART_Data_Ready 0070                 _UART_Init 0710                 _UART_Read 064B  
              ?_UART_Init 0026                ?_UART_Read 0070       start_initialization 07FC  
               ___latbits 0002             __pcstackBANK0 0020                  ?___aldiv 0070  
             ??_UART_Init 002A               ??_UART_Read 0070                UART_Init@x 0079  
         ___aldiv@divisor 0070           ___aldiv@counter 0020           _UART_Data_Ready 0645  
       UART_Init@baudrate 0026          __size_of___aldiv 008F   __end_of_UART_Data_Ready 064B  
           __size_of_main 0030              ___aldiv@sign 0021          ?_UART_Data_Ready 0070  
